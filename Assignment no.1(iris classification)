{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "      <th>species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   sepal_length  sepal_width  petal_length  petal_width species\n",
       "0           5.1          3.5           1.4          0.2  setosa\n",
       "1           4.9          3.0           1.4          0.2  setosa\n",
       "2           4.7          3.2           1.3          0.2  setosa\n",
       "3           4.6          3.1           1.5          0.2  setosa\n",
       "4           5.0          3.6           1.4          0.2  setosa"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import pandas as pd  \n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import svm, datasets\n",
    "\n",
    "# import some data to play with ... load the iris data set\n",
    "irisdata = sns.load_dataset('iris')\n",
    "irisdata.head()#look at the attributes (=> X) and Labels(=>y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(150, 5)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['setosa', 'versicolor', 'virginica'], dtype=object)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdata.species.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "      <td>150.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>5.843333</td>\n",
       "      <td>3.057333</td>\n",
       "      <td>3.758000</td>\n",
       "      <td>1.199333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.828066</td>\n",
       "      <td>0.435866</td>\n",
       "      <td>1.765298</td>\n",
       "      <td>0.762238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>4.300000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5.100000</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1.600000</td>\n",
       "      <td>0.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.800000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.350000</td>\n",
       "      <td>1.300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.400000</td>\n",
       "      <td>3.300000</td>\n",
       "      <td>5.100000</td>\n",
       "      <td>1.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.900000</td>\n",
       "      <td>4.400000</td>\n",
       "      <td>6.900000</td>\n",
       "      <td>2.500000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       sepal_length  sepal_width  petal_length  petal_width\n",
       "count    150.000000   150.000000    150.000000   150.000000\n",
       "mean       5.843333     3.057333      3.758000     1.199333\n",
       "std        0.828066     0.435866      1.765298     0.762238\n",
       "min        4.300000     2.000000      1.000000     0.100000\n",
       "25%        5.100000     2.800000      1.600000     0.300000\n",
       "50%        5.800000     3.000000      4.350000     1.300000\n",
       "75%        6.400000     3.300000      5.100000     1.800000\n",
       "max        7.900000     4.400000      6.900000     2.500000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdata.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sepal_length</th>\n",
       "      <th>sepal_width</th>\n",
       "      <th>petal_length</th>\n",
       "      <th>petal_width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sepal_length</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.117570</td>\n",
       "      <td>0.871754</td>\n",
       "      <td>0.817941</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>sepal_width</th>\n",
       "      <td>-0.117570</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.428440</td>\n",
       "      <td>-0.366126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>petal_length</th>\n",
       "      <td>0.871754</td>\n",
       "      <td>-0.428440</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.962865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>petal_width</th>\n",
       "      <td>0.817941</td>\n",
       "      <td>-0.366126</td>\n",
       "      <td>0.962865</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              sepal_length  sepal_width  petal_length  petal_width\n",
       "sepal_length      1.000000    -0.117570      0.871754     0.817941\n",
       "sepal_width      -0.117570     1.000000     -0.428440    -0.366126\n",
       "petal_length      0.871754    -0.428440      1.000000     0.962865\n",
       "petal_width       0.817941    -0.366126      0.962865     1.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "irisdata.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SIDDESH PATIL\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='measurement', ylabel='value'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,8))\n",
    "m = pd.melt(irisdata,'species',var_name='measurement')\n",
    "sns.barplot('measurement','value',hue='species',data=m)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(6,8))\n",
    "sns.scatterplot(x = 'petal_length' ,y = 'sepal_width', hue = 'species',data = irisdata)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(irisdata.corr(),annot=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Petal Length and Petal Width are highly Correlated -- 0.96\n",
    "Petal Length and Sepal Length having strong Correlation -- 0.87\n",
    "Sepal Length and Petal Width have also storng Correlation -- 0.82"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining X and Y ,and also our train test split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = irisdata.drop([\"species\"], axis = 1).values\n",
    "y = irisdata[\"species\"].values\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we do scaling as we do not want that feature with high value ranges to dominate other feature values.\n",
    "So,here we use standardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train)\n",
    "\n",
    "X_train = scaler.transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9736842105263158\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model = LogisticRegression(solver = \"lbfgs\", class_weight = \"balanced\")\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "print(model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "K-Nearest-Neighbour Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9736842105263158\n"
     ]
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "model = KNeighborsClassifier(n_neighbors = 3)\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "print(model.score(X_test, y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9736842105263158"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "forest= RandomForestClassifier(n_estimators =40, random_state = 0)\n",
    "scaler = StandardScaler()\n",
    "scaler.fit(X_train, y_train)\n",
    "X_train = scaler.transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "forest.fit(X_train,y_train)  \n",
    "y_pred = forest.predict(X_test)\n",
    "forest.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
